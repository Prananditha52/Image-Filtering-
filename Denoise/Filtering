import numpy as np
import math
import cv2
from statistics import median


class Filtering:

    def __init__(self, image, filter_name, filter_size, var = None):
        """initializes the variables of spatial filtering on an input image
        takes as input:
        image: the noisy input image
        filter_name: the name of the mask to use
        filter_size: integer value of the size of the mask
        alpha_d: parameter of the alpha trimmed mean filter
        order: parameter of the order for contra harmonic"""

        self.image = image

        if filter_name == 'arithmetic_mean':
            self.filter = self.get_arithmetic_mean
        elif filter_name == 'geometric_mean':
            self.filter = self.get_geometric_mean
        if filter_name == 'local_noise':
            self.filter = self.get_local_noise
        elif filter_name == 'median':
            self.filter = self.get_median
        elif filter_name == 'adaptive_median':
            self.filter = self.get_adaptive_median

        self.filter_size = filter_size
        self.global_var = var
        self.filter_name=filter_name

        self.S_max = 15

    def get_arithmetic_mean(self, roi):
        """Computes the arithmetic mean filter
        takes as input:
        kernel: a list/array of intensity values
        returns the arithmetic mean value in the current kernel"""
        row,column=np.shape(roi)
        sum=0
        for i in range(row):
            for j in range(column):
                sum+=roi[i,j]
        return sum/(row*column)

    def get_geometric_mean(self, roi):
        """Computes the geometric mean filter
                        takes as input:
                        kernel: a list/array of intensity values
                        returns the geometric mean value in the current kernel"""
        row, column = np.shape(roi)
        product = 1
        for i in range(row):
            for j in range(column):
                product *= np.float64(roi[i, j])
        temp=(1/(row*column))
        return product**temp

    def get_local_noise(self, kernel, roi):
        """Computes the result of local noise reduction
                        takes as input:
                        kernel: a list/array of intensity values
                        returns result of local noise reduction value of the current kernel"""
        row, column = np.shape(kernel)
        sum = 0
        for i in range(row):
            for j in range(column):
                sum += kernel[i, j]
        mean=sum/(row*column)
        sum_1=0
        for i in range(row):
            for j in range(column):
               sum_1+=(kernel[i,j]-mean)**2
        sd=sum_1/((row*column)-1)
        return  mean,(roi/sd)

    def get_median(self, roi):
        """Computes the median filter
        takes as input:
        kernel: a list/array of intensity values
        returns the median value in the current kernel
        """
        row, column = np.shape(roi)
        temp=list()
        for i in range(row):
            for j in range(column):
                temp.append(roi[i,j])
        sorted_list=np.sort(temp)
        d=int(np.ceil((row*column)/2))
        val=sorted_list[d]
        return val


    def get_adaptive_median(self, roi,filter_sz):
        """Computes the adaptive median filtering value
        Note: Adaptive median filter may involve additional steps, you are welcome to create any additional functions as needed, 
        and you can change the signature of get_adaptive_median function as well.
                        takes as input:
        kernel: a list/array of intensity values        
        returns the adaptive median filtering value"""

        window_size=filter_sz
        output=0
        smax=self.S_max
        min_1=0
        max_1=0
        row, column = np.shape(roi)
        k=int(np.floor(row/2))
        j=int(np.floor(column/2))
        xy=roi[k,j]
        temp = list()
        for i in range(row):
            for j in range(column):
                temp.append(roi[i, j])
        median_1=median(temp)
        min_1=min(temp)
        max_1=max(temp)
        A1=int(median_1)-int(min_1)
        A2=int(median_1)-int(max_1)
        if A1>0 and A2<0:
            B1=int(xy)-int(min_1)
            B2=int(xy)-int(max_1)
            if B1>0 and B2<0:
                output=xy
            else:
                output=median_1
        else:
                if row<=smax:
                    window_size=filter_sz+2
                else:
                    output = median_1

        return output,window_size

    def region(self,padded_image,i,j,filter_size):
        smax=self.S_max
        kernel = padded_image[i:i + filter_size, j:j + filter_size]
        output,window_size = self.get_adaptive_median(kernel,filter_size)

        if window_size>filter_size and window_size!=smax:
            output,window_size=self.get_adaptive_median(kernel,window_size)


        return output

    def adaptive_filter(self,image,filter_size):
        max_fsize=self.S_max
        padded_image = np.zeros((np.shape(image)[0] + (max_fsize-1), np.shape(image)[1] + (max_fsize-1)), np.uint8)
        temp = int(max_fsize / 2)
        for i in range(np.shape(image)[0]):
            for j in range(np.shape(image)[1]):
                padded_image[i + temp, j + temp] = image[i, j]
        filtered_image = np.zeros((np.shape(image)[0], np.shape(image)[1]), np.uint8)
        for i in range(np.shape(image)[0]):
            for j in range(np.shape(image)[1]):
                filtered_image[i,j]=self.region(padded_image,i,j,filter_size)
        return np.asarray(filtered_image)
    def filtering(self):
        """performs filtering on an image containing gaussian or salt & pepper noise
        returns the denoised image
        ----------------------------------------------------------
        Note: Filtering for the purpose of image restoration does not involve convolution.
        For every pixel in the image, we select a neighborhood of values defined by the kernel and apply a mathematical
        operation for all the elements with in the kernel. For example, mean, median and etc.

        Steps:
        1. add the necesssary zero padding to the noisy image that way we have sufficient values to perform the operations
        on the border pixels. The number of rows and columns of zero padding is defined by the kernel size
        2. Iterate through the image and every pixel (i,j) gather the neighbors defined by the kernel into a list (or any data structure)
        3. Pass these values to one of the filters that will compute the necessary mathematical operations (mean, median, etc.)
        4. Save the results at (i,j) in the ouput image.
        5. return the output image
        
        Please note that the adaptive median filter may involve additional steps, you are welcome to create any additional functions as needed, 
        and you can change the signature of get_adaptive_median function as well.
        """
        image=self.image
        filter=self.filter
        filter_name=self.filter_name
        global_var=self.global_var
        max_fsize=self.S_max
        row,column=np.shape(image)
        filter_size=self.filter_size
        temp_1=filter_size-1
        padded_image = np.zeros((np.shape(image)[0]+temp_1, np.shape(image)[1]+temp_1), np.uint8)
        temp=int(temp_1/2)
        for i in range(np.shape(image)[0]):
            for j in range(np.shape(image)[1]):
                padded_image[i + temp, j + temp] = image[i,j]
        filtered_image=np.zeros((np.shape(image)[0], np.shape(image)[1]), np.uint8)
        if filter_name=='local_noise':
            for i in range(np.shape(image)[0]):
                for j in range(np.shape(image)[1]):
                    kernel=padded_image[i:i+filter_size,j:j+filter_size]
                    mean, sd = filter(kernel,global_var)
                    filtered_image[i, j] = padded_image[i + temp, j + temp] - (sd * (padded_image[i + temp, j + temp] - mean))
        elif filter_name=='adaptive_median':
            filtered_image=self.adaptive_filter(image,filter_size)
        else:
            for i in range(np.shape(image)[0]):
                for j in range(np.shape(image)[1]):
                    kernel=padded_image[i:i+filter_size,j:j+filter_size]
                    filtered_image[i, j] = filter(kernel)


        return filtered_image

